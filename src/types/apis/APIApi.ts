/* tslint:disable */
/* eslint-disable */
/**
 * Gym Manager Swagger
 * Gym Manager REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CalendarVO,
  MemberVO,
  MembershipVO,
  PaymentsHistoryVO,
  ResponseJsonCalendarVO,
  ResponseJsonListCalendarVO,
  ResponseJsonMemberVO,
  ResponseJsonMembershipVO,
  ResponseJsonObject,
  ResponseJsonPaymentsHistoryVO,
  ResponseJsonResponseListVOMemberVO,
  ResponseJsonResponseListVOMembershipVO,
  ResponseJsonResponseListVOPaymentsHistoryVO,
  ResponseJsonResponseListVOSalesChartVO,
} from '../models/index';
import {
    CalendarVOFromJSON,
    CalendarVOToJSON,
    MemberVOFromJSON,
    MemberVOToJSON,
    MembershipVOFromJSON,
    MembershipVOToJSON,
    PaymentsHistoryVOFromJSON,
    PaymentsHistoryVOToJSON,
    ResponseJsonCalendarVOFromJSON,
    ResponseJsonCalendarVOToJSON,
    ResponseJsonListCalendarVOFromJSON,
    ResponseJsonListCalendarVOToJSON,
    ResponseJsonMemberVOFromJSON,
    ResponseJsonMemberVOToJSON,
    ResponseJsonMembershipVOFromJSON,
    ResponseJsonMembershipVOToJSON,
    ResponseJsonObjectFromJSON,
    ResponseJsonObjectToJSON,
    ResponseJsonPaymentsHistoryVOFromJSON,
    ResponseJsonPaymentsHistoryVOToJSON,
    ResponseJsonResponseListVOMemberVOFromJSON,
    ResponseJsonResponseListVOMemberVOToJSON,
    ResponseJsonResponseListVOMembershipVOFromJSON,
    ResponseJsonResponseListVOMembershipVOToJSON,
    ResponseJsonResponseListVOPaymentsHistoryVOFromJSON,
    ResponseJsonResponseListVOPaymentsHistoryVOToJSON,
    ResponseJsonResponseListVOSalesChartVOFromJSON,
    ResponseJsonResponseListVOSalesChartVOToJSON,
} from '../models/index';

export interface DeleteRequest {
    membershipVO: MembershipVO;
}

export interface Delete1Request {
    paymentsHistoryVO: PaymentsHistoryVO;
}

export interface Delete2Request {
    calendarVO: CalendarVO;
}

export interface Delete3Request {
    memberVO: MemberVO;
}

export interface DetailRequest {
    clSeq: number;
}

export interface InsertRequest {
    membershipVO: MembershipVO;
}

export interface Insert1Request {
    paymentsHistoryVO: PaymentsHistoryVO;
}

export interface Insert2Request {
    memberVO: MemberVO;
}

export interface Insert3Request {
    calendarVO: CalendarVO;
}

export interface SelectAgeListRequest {
    year: string;
}

export interface SelectDetailRequest {
    membershipSeq: number;
}

export interface SelectDetail1Request {
    phSeq: number;
}

export interface SelectDetail2Request {
    memberSeq: number;
}

export interface SelectListRequest {
    wpSeq: number;
    membershipName?: string;
    membershipPeriod?: string;
    currentPageNo?: number;
    recordCountPerPage?: number;
}

export interface SelectList1Request {
    phName?: string;
    memberName?: string;
    regDate?: string;
    currentPageNo?: number;
    recordCountPerPage?: number;
}

export interface SelectList2Request {
    wpSeq: number;
    memberName?: string;
    memberPhone?: string;
    memberSex?: string;
    activeYn?: string;
    currentPageNo?: number;
    recordCountPerPage?: number;
}

export interface SelectList4Request {
    wpSeq: number;
    searchYear?: string;
    searchMonth?: string;
}

export interface SelectMembershipListRequest {
    year: string;
}

export interface SelectMonthListRequest {
    year: string;
}

export interface SelectMyPayHistoryListRequest {
    memberSeq: number;
}

export interface UpdateRequest {
    membershipVO: MembershipVO;
}

export interface Update1Request {
    paymentsHistoryVO: PaymentsHistoryVO;
}

export interface Update2Request {
    memberVO: MemberVO;
}

export interface Update3Request {
    calendarVO: CalendarVO;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * 회원권 삭제하기
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['membershipVO'] == null) {
            throw new runtime.RequiredError(
                'membershipVO',
                'Required parameter "membershipVO" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/membership`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipVOToJSON(requestParameters['membershipVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 회원권 삭제하기
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제 내역 삭제하기
     */
    async delete1Raw(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['paymentsHistoryVO'] == null) {
            throw new runtime.RequiredError(
                'paymentsHistoryVO',
                'Required parameter "paymentsHistoryVO" was null or undefined when calling delete1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/member/pay`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentsHistoryVOToJSON(requestParameters['paymentsHistoryVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 결제 내역 삭제하기
     */
    async delete1(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.delete1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 일정 삭제하기
     */
    async delete2Raw(requestParameters: Delete2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['calendarVO'] == null) {
            throw new runtime.RequiredError(
                'calendarVO',
                'Required parameter "calendarVO" was null or undefined when calling delete2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/calendar`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CalendarVOToJSON(requestParameters['calendarVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 일정 삭제하기
     */
    async delete2(requestParameters: Delete2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.delete2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원 삭제하기
     */
    async delete3Raw(requestParameters: Delete3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['memberVO'] == null) {
            throw new runtime.RequiredError(
                'memberVO',
                'Required parameter "memberVO" was null or undefined when calling delete3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/member/v1/list`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: MemberVOToJSON(requestParameters['memberVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 회원 삭제하기
     */
    async delete3(requestParameters: Delete3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.delete3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 일정 상세 조회하기
     */
    async detailRaw(requestParameters: DetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonCalendarVO>> {
        if (requestParameters['clSeq'] == null) {
            throw new runtime.RequiredError(
                'clSeq',
                'Required parameter "clSeq" was null or undefined when calling detail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/calendar/{clSeq}`.replace(`{${"clSeq"}}`, encodeURIComponent(String(requestParameters['clSeq']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonCalendarVOFromJSON(jsonValue));
    }

    /**
     * 일정 상세 조회하기
     */
    async detail(requestParameters: DetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonCalendarVO> {
        const response = await this.detailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원권 등록하기
     */
    async insertRaw(requestParameters: InsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['membershipVO'] == null) {
            throw new runtime.RequiredError(
                'membershipVO',
                'Required parameter "membershipVO" was null or undefined when calling insert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/membership`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipVOToJSON(requestParameters['membershipVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 회원권 등록하기
     */
    async insert(requestParameters: InsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.insertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제 내역 등록하기
     */
    async insert1Raw(requestParameters: Insert1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['paymentsHistoryVO'] == null) {
            throw new runtime.RequiredError(
                'paymentsHistoryVO',
                'Required parameter "paymentsHistoryVO" was null or undefined when calling insert1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/member/pay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentsHistoryVOToJSON(requestParameters['paymentsHistoryVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 결제 내역 등록하기
     */
    async insert1(requestParameters: Insert1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.insert1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원 등록하기
     */
    async insert2Raw(requestParameters: Insert2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['memberVO'] == null) {
            throw new runtime.RequiredError(
                'memberVO',
                'Required parameter "memberVO" was null or undefined when calling insert2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/member/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberVOToJSON(requestParameters['memberVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 회원 등록하기
     */
    async insert2(requestParameters: Insert2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.insert2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 일정 등록하기
     */
    async insert3Raw(requestParameters: Insert3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['calendarVO'] == null) {
            throw new runtime.RequiredError(
                'calendarVO',
                'Required parameter "calendarVO" was null or undefined when calling insert3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/calendar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalendarVOToJSON(requestParameters['calendarVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 일정 등록하기
     */
    async insert3(requestParameters: Insert3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.insert3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 연령별 매출 통계
     */
    async selectAgeListRaw(requestParameters: SelectAgeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonResponseListVOSalesChartVO>> {
        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling selectAgeList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chart/sales/age`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonResponseListVOSalesChartVOFromJSON(jsonValue));
    }

    /**
     * 연령별 매출 통계
     */
    async selectAgeList(requestParameters: SelectAgeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonResponseListVOSalesChartVO> {
        const response = await this.selectAgeListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원권 상세 조회하기
     */
    async selectDetailRaw(requestParameters: SelectDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonMembershipVO>> {
        if (requestParameters['membershipSeq'] == null) {
            throw new runtime.RequiredError(
                'membershipSeq',
                'Required parameter "membershipSeq" was null or undefined when calling selectDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/membership/{membershipSeq}`.replace(`{${"membershipSeq"}}`, encodeURIComponent(String(requestParameters['membershipSeq']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonMembershipVOFromJSON(jsonValue));
    }

    /**
     * 회원권 상세 조회하기
     */
    async selectDetail(requestParameters: SelectDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonMembershipVO> {
        const response = await this.selectDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제 내역 상세 조회하기
     */
    async selectDetail1Raw(requestParameters: SelectDetail1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonPaymentsHistoryVO>> {
        if (requestParameters['phSeq'] == null) {
            throw new runtime.RequiredError(
                'phSeq',
                'Required parameter "phSeq" was null or undefined when calling selectDetail1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/member/pay/{phSeq}`.replace(`{${"phSeq"}}`, encodeURIComponent(String(requestParameters['phSeq']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonPaymentsHistoryVOFromJSON(jsonValue));
    }

    /**
     * 결제 내역 상세 조회하기
     */
    async selectDetail1(requestParameters: SelectDetail1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonPaymentsHistoryVO> {
        const response = await this.selectDetail1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원 상세 조회하기
     */
    async selectDetail2Raw(requestParameters: SelectDetail2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonMemberVO>> {
        if (requestParameters['memberSeq'] == null) {
            throw new runtime.RequiredError(
                'memberSeq',
                'Required parameter "memberSeq" was null or undefined when calling selectDetail2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/member/list/{memberSeq}`.replace(`{${"memberSeq"}}`, encodeURIComponent(String(requestParameters['memberSeq']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonMemberVOFromJSON(jsonValue));
    }

    /**
     * 회원 상세 조회하기
     */
    async selectDetail2(requestParameters: SelectDetail2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonMemberVO> {
        const response = await this.selectDetail2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원권 목록 조회하기
     */
    async selectListRaw(requestParameters: SelectListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonResponseListVOMembershipVO>> {
        if (requestParameters['wpSeq'] == null) {
            throw new runtime.RequiredError(
                'wpSeq',
                'Required parameter "wpSeq" was null or undefined when calling selectList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['wpSeq'] != null) {
            queryParameters['wpSeq'] = requestParameters['wpSeq'];
        }

        if (requestParameters['membershipName'] != null) {
            queryParameters['membershipName'] = requestParameters['membershipName'];
        }

        if (requestParameters['membershipPeriod'] != null) {
            queryParameters['membershipPeriod'] = requestParameters['membershipPeriod'];
        }

        if (requestParameters['currentPageNo'] != null) {
            queryParameters['currentPageNo'] = requestParameters['currentPageNo'];
        }

        if (requestParameters['recordCountPerPage'] != null) {
            queryParameters['recordCountPerPage'] = requestParameters['recordCountPerPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/membership`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonResponseListVOMembershipVOFromJSON(jsonValue));
    }

    /**
     * 회원권 목록 조회하기
     */
    async selectList(requestParameters: SelectListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonResponseListVOMembershipVO> {
        const response = await this.selectListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제 내역 목록 조회하기
     */
    async selectList1Raw(requestParameters: SelectList1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonResponseListVOPaymentsHistoryVO>> {
        const queryParameters: any = {};

        if (requestParameters['phName'] != null) {
            queryParameters['phName'] = requestParameters['phName'];
        }

        if (requestParameters['memberName'] != null) {
            queryParameters['memberName'] = requestParameters['memberName'];
        }

        if (requestParameters['regDate'] != null) {
            queryParameters['regDate'] = requestParameters['regDate'];
        }

        if (requestParameters['currentPageNo'] != null) {
            queryParameters['currentPageNo'] = requestParameters['currentPageNo'];
        }

        if (requestParameters['recordCountPerPage'] != null) {
            queryParameters['recordCountPerPage'] = requestParameters['recordCountPerPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/member/pay`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonResponseListVOPaymentsHistoryVOFromJSON(jsonValue));
    }

    /**
     * 결제 내역 목록 조회하기
     */
    async selectList1(requestParameters: SelectList1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonResponseListVOPaymentsHistoryVO> {
        const response = await this.selectList1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원 목록 조회하기
     */
    async selectList2Raw(requestParameters: SelectList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonResponseListVOMemberVO>> {
        if (requestParameters['wpSeq'] == null) {
            throw new runtime.RequiredError(
                'wpSeq',
                'Required parameter "wpSeq" was null or undefined when calling selectList2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['wpSeq'] != null) {
            queryParameters['wpSeq'] = requestParameters['wpSeq'];
        }

        if (requestParameters['memberName'] != null) {
            queryParameters['memberName'] = requestParameters['memberName'];
        }

        if (requestParameters['memberPhone'] != null) {
            queryParameters['memberPhone'] = requestParameters['memberPhone'];
        }

        if (requestParameters['memberSex'] != null) {
            queryParameters['memberSex'] = requestParameters['memberSex'];
        }

        if (requestParameters['activeYn'] != null) {
            queryParameters['activeYn'] = requestParameters['activeYn'];
        }

        if (requestParameters['currentPageNo'] != null) {
            queryParameters['currentPageNo'] = requestParameters['currentPageNo'];
        }

        if (requestParameters['recordCountPerPage'] != null) {
            queryParameters['recordCountPerPage'] = requestParameters['recordCountPerPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/member/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonResponseListVOMemberVOFromJSON(jsonValue));
    }

    /**
     * 회원 목록 조회하기
     */
    async selectList2(requestParameters: SelectList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonResponseListVOMemberVO> {
        const response = await this.selectList2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 년도/월별 일정 데이터 조회
     * 일정 목록 조회하기
     */
    async selectList4Raw(requestParameters: SelectList4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonListCalendarVO>> {
        if (requestParameters['wpSeq'] == null) {
            throw new runtime.RequiredError(
                'wpSeq',
                'Required parameter "wpSeq" was null or undefined when calling selectList4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['wpSeq'] != null) {
            queryParameters['wpSeq'] = requestParameters['wpSeq'];
        }

        if (requestParameters['searchYear'] != null) {
            queryParameters['searchYear'] = requestParameters['searchYear'];
        }

        if (requestParameters['searchMonth'] != null) {
            queryParameters['searchMonth'] = requestParameters['searchMonth'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/calendar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonListCalendarVOFromJSON(jsonValue));
    }

    /**
     * 년도/월별 일정 데이터 조회
     * 일정 목록 조회하기
     */
    async selectList4(requestParameters: SelectList4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonListCalendarVO> {
        const response = await this.selectList4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원권별 매출 통계
     */
    async selectMembershipListRaw(requestParameters: SelectMembershipListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonResponseListVOSalesChartVO>> {
        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling selectMembershipList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chart/sales/membership`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonResponseListVOSalesChartVOFromJSON(jsonValue));
    }

    /**
     * 회원권별 매출 통계
     */
    async selectMembershipList(requestParameters: SelectMembershipListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonResponseListVOSalesChartVO> {
        const response = await this.selectMembershipListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 년도별 월 매출 통계
     */
    async selectMonthListRaw(requestParameters: SelectMonthListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonResponseListVOSalesChartVO>> {
        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling selectMonthList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chart/sales/month`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonResponseListVOSalesChartVOFromJSON(jsonValue));
    }

    /**
     * 년도별 월 매출 통계
     */
    async selectMonthList(requestParameters: SelectMonthListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonResponseListVOSalesChartVO> {
        const response = await this.selectMonthListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원별 결제 내역
     */
    async selectMyPayHistoryListRaw(requestParameters: SelectMyPayHistoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonResponseListVOPaymentsHistoryVO>> {
        if (requestParameters['memberSeq'] == null) {
            throw new runtime.RequiredError(
                'memberSeq',
                'Required parameter "memberSeq" was null or undefined when calling selectMyPayHistoryList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/member/pay/history/{memberSeq}`.replace(`{${"memberSeq"}}`, encodeURIComponent(String(requestParameters['memberSeq']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonResponseListVOPaymentsHistoryVOFromJSON(jsonValue));
    }

    /**
     * 회원별 결제 내역
     */
    async selectMyPayHistoryList(requestParameters: SelectMyPayHistoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonResponseListVOPaymentsHistoryVO> {
        const response = await this.selectMyPayHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원권 수정하기
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['membershipVO'] == null) {
            throw new runtime.RequiredError(
                'membershipVO',
                'Required parameter "membershipVO" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/membership`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipVOToJSON(requestParameters['membershipVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 회원권 수정하기
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제 내역 수정하기
     */
    async update1Raw(requestParameters: Update1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['paymentsHistoryVO'] == null) {
            throw new runtime.RequiredError(
                'paymentsHistoryVO',
                'Required parameter "paymentsHistoryVO" was null or undefined when calling update1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/member/pay`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentsHistoryVOToJSON(requestParameters['paymentsHistoryVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 결제 내역 수정하기
     */
    async update1(requestParameters: Update1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.update1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원 수정하기
     */
    async update2Raw(requestParameters: Update2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseJsonObject>> {
        if (requestParameters['memberVO'] == null) {
            throw new runtime.RequiredError(
                'memberVO',
                'Required parameter "memberVO" was null or undefined when calling update2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/member/list`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MemberVOToJSON(requestParameters['memberVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseJsonObjectFromJSON(jsonValue));
    }

    /**
     * 회원 수정하기
     */
    async update2(requestParameters: Update2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseJsonObject> {
        const response = await this.update2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 일정 수정하기
     */
    async update3Raw(requestParameters: Update3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['calendarVO'] == null) {
            throw new runtime.RequiredError(
                'calendarVO',
                'Required parameter "calendarVO" was null or undefined when calling update3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/calendar`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CalendarVOToJSON(requestParameters['calendarVO']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 일정 수정하기
     */
    async update3(requestParameters: Update3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.update3Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
